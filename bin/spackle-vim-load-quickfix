#!/usr/bin/env ruby
spackle_dir = File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))
$LOAD_PATH.unshift(spackle_dir) unless $LOAD_PATH.include?(spackle_dir)

require 'project_scout'

# Load a Vim Quickfix file in an active vim session.
#
# Usage:
# spackle-vim-load-quickfix [servername] quickfix_file
#
# If servername is specified, try to use it as the vim
# server. Otherwise, assume the name for the vim server
# is the from ruby-project-root -basename, if
# successful. If no Ruby project root was found, use
# DEFAULT as the servername.
#
# If the server doesn't exist, we'll create a new
# gvim session.
#

def servername_from_arguments
  ARGV.shift if ARGV.count == 2
end

def servername_from_project_root
  project_root = ProjectScout.scan Dir.pwd
  File.basename(project_root) if project_root
end

def servername
  @servername ||= servername_from_arguments || servername_from_project_root || "DEFAULT"
end

def server_running?
  !`gvim --serverlist`.grep(/#{servername}/i).empty?
end

unless server_running?
  system %{gvim --servername #{servername}}
  sleep 1
end

STDERR.reopen("/dev/null")
STDOUT.reopen(STDERR)
system %{gvim --servername #{servername} --remote-send "<ESC>" &> /dev/null}
system %{gvim --servername #{servername} --remote-expr "LoadSpackleQuickfix('#{ARGV.first}')" &> /dev/null}
system %{gvim --servername #{servername} --remote-send "<ESC><C-W>p" &> /dev/null}
exit
