= Spackle

Smoothing out the gaps between the Rubyist and the Ruby. 

Well, honestly, it only fills in the gaps between RSpec and Vim right now,
but that's a good start. Cucumber support is in the works, and perhaps a
few other surprises if I make the time.

Patches supporting other editors gladly accepted. Most people aren't very 
editor-agnostic, but Spackle doesn't care! (Or, at least, it wouldn't if
you patched it with support for your amazing editor that's surely better
than mine.)

== Elevator Pitch

Spackle tells your editor about the errors in your code. No more need to 
visually scan your test output for errors, filenames, and line numbers.
Just tell your editor to jump to the next error location.

== Installation

  gem install spackle --sources http://gemcutter.org
  spackle-install vim

This will install Spackle's Vim plugin in ~/.vim/plugins, and
will install a few other helper scripts in your bin dir.


== Features

* custom RSpec formatters that generate output compatible with 
  Vim's quickfix functionality
* a simple Vim plugin to allow a quickfix list to loaded 
  from a file
* shell scripts to Spackle's output and Vim together
* easy to use?

== Configuration and Usage

For a tool that doesn't do a heck of alot, it's pretty configurable.
If it *could* do something else, it'd be easy to tell it how to do
that with either a .spackle file in your home directory, or a 
.spackle file in your current directory. 

See Spackle::Configuration for more information

Example .spackle

  Spackle.configure do |c|
    c.tempdir = "/some/path"
    c.callback_command = "imaginary_email_command --to user@host.com"
  end

== Architecture

Spackle's architecture consists of three components. 

NOTE: Some of this information looks forward to a future version of Spackle
that, at the moment, is fictional. So if you go looking for some of the things
referenced here and you can't find them, that's probably why. (Or it could be
an error in this document!)

Error Parser Adapters
* integrate with test harnesses like RSpec and Cucumber
* or integrate with Ruby's standard Error API
* or parse Ruby's standard backtrace output
* convert error output into a generic intermediary Spackle::Error format
* pass the errors to Spackle's core for reformatting and output
* found in Spackle::Spec, Spackle::Cucumber and Spackle::Ruby
 
Spackle Core
* glues all the pieces together
* loads user configuration 
* tries to do as much as it can automagically
* tries to stay out of your way
* routes Spackle::Error objects from the Adapters, through an 
  Output Formatter, and finally to an output file
* triggers a callback after every test run that can send error
  information to your editor

Output Formatters
* convert the generic Error format into an output-specific format
  for your callback to handle
* found in Spackle::Output

Spackle's core is a Controller that loads its configuration, tries to do
as much automagically as it can, and tries to stay out of the way. It aids
the models by routing Errors to the 

== Known Issues

* Spackle assumes you're using something UNIXy. If you're not, it likely 
  won't work. I have no interest in changing this, but I'll gladly 
  pull your patches.

== Credits

Spackle was inspired by https://wincent.com/blog/running-rspec-specs-from-inside-vim

== Note on Patches/Pull Requests

This section was generated by Jeweler's boilerplate, but it seems 
pretty sensible.

* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but
   bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2009 Rick Lee-Morlang. See LICENSE for details.
